"""
Fixtures for ansible-sign tests
"""

import gnupg
import os
import pytest
import shutil

from ansible_sign.signing import GPGSigner


def _gpg_home_with_secret_key(tmp_path, no_protection=False):
    """
    Creates a GPG home (in a temporary directory) and generates a private key
    inside of that GPG home.

    Returns the path to the GPG home.
    """
    home = tmp_path / "gpg-home"
    home.mkdir()
    gpg = gnupg.GPG(gnupghome=home)
    key_params = gpg.gen_key_input(
        key_length=2048,
        name_real="TEMPORARY ansible-sign TEST key",
        name_comment="Generated by ansible-sign test fixture",
        name_email="foo@example.com",
        passphrase="doYouEvenPassphrase" if no_protection is False else None,
        no_protection=no_protection,
    )
    gpg.gen_key(key_params)
    return home


@pytest.fixture
def gpg_home_with_secret_key(tmp_path):
    yield _gpg_home_with_secret_key(tmp_path)


@pytest.fixture
def gpg_home_with_secret_key_no_pass(tmp_path):
    yield _gpg_home_with_secret_key(tmp_path, no_protection=True)


@pytest.fixture
def gpg_home_with_hao_pubkey(tmp_path):
    home = tmp_path / "gpg-home-with-hao-pubkey"
    home.mkdir()
    gpg = gnupg.GPG(gnupghome=home)
    pubkey = open(os.path.join(os.path.dirname(os.path.abspath(__file__)), "fixtures", "gpgkeys", "hao_pubkey.txt"), "r").read()
    gpg.import_keys(pubkey)
    yield home


@pytest.fixture
def unsigned_project_with_checksum_manifest(tmp_path):
    """
    Creates a project directory (at a temporary location) with a generated, but
    unsigned, checksum manifest, ready for signing.

    Uses the 'manifest-success' checksum fixture directory as its base.
    """
    project = tmp_path / "project_root"
    shutil.copytree(
        os.path.join(
            os.path.dirname(os.path.abspath(__file__)),
            "fixtures",
            "checksum",
            "manifest-success",
        ),
        project,
        dirs_exist_ok=True,
    )
    yield project


@pytest.fixture
def signed_project_and_gpg(
    gpg_home_with_secret_key,
    unsigned_project_with_checksum_manifest,
):
    out = unsigned_project_with_checksum_manifest / ".ansible-sign" / "sha256sum.txt.sig"
    manifest_path = unsigned_project_with_checksum_manifest / ".ansible-sign" / "sha256sum.txt"
    signer = GPGSigner(
        manifest_path=manifest_path,
        output_path=out,
        passphrase="doYouEvenPassphrase",
        gpg_home=gpg_home_with_secret_key,
    )
    result = signer.sign()
    assert result.success is True
    assert os.path.exists(out)

    # now signed
    yield (unsigned_project_with_checksum_manifest, gpg_home_with_secret_key)
