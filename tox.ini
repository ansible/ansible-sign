[tox]
requires =
    tox>=4.2
    tox-extra
    tox-uv
env_list =
    py3
    lint
    docs
    pkg

[testenv]
description = Invoke pytest to run automated tests
package = editable
deps =
    -r {toxinidir}/tests/requirements.txt
extras =
    test
pass_env =
    CI
    CURL_CA_BUNDLE
    FORCE_COLOR
    GITHUB_*
    HOME
    LANG
    LC_*
    NO_COLOR
    PYTEST_*
    PYTHON*
    PYTHONBREAKPOINT
    PYTHONIOENCODING
    PYTHONPYCACHEPREFIX
    PY_COLORS
    REQUESTS_CA_BUNDLE
    RTD_TOKEN
    SETUPTOOLS_*
    SSH_AUTH_SOCK
    SSL_CERT_FILE
    UV_*
set_env =
    COVERAGE_FILE = {env:COVERAGE_FILE:{env_dir}/.coverage.{env_name}}
    COVERAGE_PROCESS_START = {tox_root}/pyproject.toml
commands_pre =
    sh -c "rm -f {env_dir}/.coverage.* 2>/dev/null || true"
commands =
    rm -rf /tmp/ansible-sign-pytest
    mkdir /tmp/ansible-sign-pytest
    coverage run -m pytest --basetemp /tmp/ansible-sign-pytest --color=yes {posargs:--junitxml=./junit.xml}
    {tox_root}/tools/report-coverage
allowlist_externals =
    mkdir
    rm
    sh
    {tox_root}/tools/report-coverage

[testenv:lint]
description = Run all linters
base_python = python3.9
commands_pre =
commands =
    {env_python} -m pre_commit run --all-files --show-diff-on-failure {posargs:}

[testenv:pkg]
description =
    Build package, verify metadata, install package and assert behavior when ansible is missing.
skip_install = true
deps =
    build>=0.9
    pip
    pipx
    twine>=4.0.1
commands_pre =
commands =
    {env_python} -c 'import os.path, shutil, sys; \
      dist_dir = os.path.join("{tox_root}", "dist"); \
      os.path.isdir(dist_dir) or sys.exit(0); \
      print("Removing \{!s\} contents...".format(dist_dir), file=sys.stderr); \
      shutil.rmtree(dist_dir)'
    {env_python} -m build --outdir {tox_root}/dist/ {tox_root}
    python3 -m twine check --strict {tox_root}/dist/*

[testenv:{build,clean}]
description =
    build: Build the package in isolation according to PEP517, see https://github.com/pypa/build
    clean: Remove old distribution files and temporary build artifacts (./build and ./dist)
skip_install = true
deps =
    build: build[virtualenv]
pass_env =
    SETUPTOOLS_*
change_dir = {toxinidir}
commands =
    clean: python -c 'import shutil; [shutil.rmtree(p, True) for p in ("build", "dist", "docs/_build")]'
    clean: python -c 'import pathlib, shutil; [shutil.rmtree(p, True) for p in pathlib.Path("src").glob("*.egg-info")]'
    build: python -m build {posargs}

[testenv:{docs,doctests,linkcheck}]
description =
    docs: Invoke sphinx-build to build the docs
    doctests: Invoke sphinx-build to run doctests
    linkcheck: Check for broken links in the documentation
extras =
    docs
pass_env =
    READTHEDOCS_OUTPUT
    SETUPTOOLS_*
set_env =
    DOCSDIR = {toxinidir}/docs
    READTHEDOCS_OUTPUT = {env:READTHEDOCS_OUTPUT:docs/_build}
    docs: BUILD = html
    doctests: BUILD = doctest
    linkcheck: BUILD = linkcheck
commands =
    sphinx-build --color -b {env:BUILD} -d "{env:READTHEDOCS_OUTPUT:docs/_build}/doctrees" "{env:DOCSDIR}" "{env:READTHEDOCS_OUTPUT:docs/_build}/{env:BUILD}" {posargs}

[testenv:publish]
description =
    Publish the package you have been developing to a package index server.
    By default, it uses testpypi. If you really want to publish your package
    to be publicly accessible in PyPI, use the `-- --repository pypi` option.
skip_install = true
deps =
    twine
pass_env =
    TWINE_PASSWORD
    TWINE_REPOSITORY
    TWINE_USERNAME
change_dir = {toxinidir}
commands =
    python -m twine check dist/*
    python -m twine upload {posargs:--repository {env:TWINE_REPOSITORY:testpypi}} dist/*
